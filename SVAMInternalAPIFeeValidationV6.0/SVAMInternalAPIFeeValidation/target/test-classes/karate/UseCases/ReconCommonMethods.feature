Feature: Recon Methods
Background:
			* url BaseURL
  		* def config = { username: '#(dbUserName)', password:'#(dbUserPassword)', url: '#(dbQuery)',driverClassName: 'com.microsoft.sqlserver.jdbc.SQLServerDriver' }
    	* def DbUtils = Java.type('utils.DbUtils')
    	* def db = new DbUtils(config)
    	
    	* def getDate2 =
		  """
		  function() {
		    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
		    var sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		    var date = new java.util.Date();
		    return sdf.format(date);
		  } 
		  """
		  * def date = getDate2()
		  
		  
		   * def expirationDateFunc =
		  """
		  function(days) {
		    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
		    var sdf = new SimpleDateFormat("yyyy-MM-dd'T'00:00:00.000'Z'");
		    
		    var date = new java.util.Date();
		    var dayAfter = new java.util.Date(date.getTime() + java.util.concurrent.TimeUnit.DAYS.toMillis( days));
		    return sdf.format(dayAfter);
		  } 
		  """
		  
		  
		   * def effectiveDateFunc =
		  """
		  function() {
		    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
		    var sdf = new SimpleDateFormat("yyyy-MM-dd'T'00:00:00.000'Z'");
		    
		    var date = new java.util.Date();
		    var dayAfter = new java.util.Date(date.getTime());
		    return sdf.format(dayAfter);
		  } 
		  """
		 
    	
@UploadReconDisapprovalDoc
Scenario: UploadReconDisapprovalDoc

	     * def receivedDateFunc =
		  """
		  function() {
		    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
		    var sdf = new SimpleDateFormat("yyyy/MM/dd");
		    var date = new java.util.Date();
		    return sdf.format(date);
		  } 
		  """ 
  	  * def receivedDate = receivedDateFunc()
  	  
	Given path '/internalapi/api/document/UploadDocument'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
     And request {"documentDesc":"TestDocument.docx","acaId":'#(appId)',"acaType":"application","bureau":"Licensing","documentType":{"key":325,"value":"Disapproval Letter","description":null,"documentSubCategory":"DISAPPROVAL"},"documentCategory":null,"receivedDate":'#(receivedDate)',"createdDate":'#(date)',"documentBase64":"data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,","contentType":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","fileName":"TestDocument.docx","tempGuid":"a6fd31bc-fa24-f48f-a4ee-27338b50493c"}
      When method post
	  Then status 200
	  And print response
	  * match response == 'true'
	 
	  	
	  	
	  	
	  	

@SearchReconApplicationInClamingQueue
Scenario: SearchReconApplicationInClamingQueue 
Given path '/internalapi/api/licensing/search/licenseApplication/queueType/3'
  	 And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
  	 
       And header current-wfroleid = 5
  	  And header authorization = 'Bearer ' + strToken
     * def stringParam = "applicationId~contains~'"+ApplicationId+"'"
       And params  {filter:'#(stringParam)',page:1,pageSize:10,licenseTypeId:1,examinerId:-1,licensingBoardId:0,isRealTimeResult:true}
     
      And request {}
	  When method get
	  Then status 200
	  And print response
	 
	   * def ApplicationDtl = karate.jsonPath(response.data, "$[?(@.applicationId == '" + ApplicationId + "')]")
	   And print ApplicationDtl
	  * match ApplicationDtl[0].taskStatus == '#(ReconAppStatus)'
	  
	  
	  	  
	  
@SumbitReviewReconRequest
Scenario: SumbitReviewReconRequest
	Given path '/internalapi/api/notification/SaveNotification'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
     And request {"applicant":{"communicationId":18483,"email":"automation@svam.com","appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":18486,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"isInstantEmail":false,"appId":'#(appId)',"notificationTypeId":2115,"createdBy":"Tarun  Gupta"}
      When method post
	  Then status 200
	  And print response
	  * match response == 'false'	
	   
	Given path '/internalapi/api/licensing/reconsideration/process/submit-review-recon-request/'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
     And request {"AppId":'#(appId)',"DeterminationValue":100,"isDisapproveForCause":'#(DisapprovalForCause)',"isConditionallyApprove":false,"TaskId":'#(TaskId)',"AppPermitsList":[]}
      When method post
	  Then status 200
	  And print response
	  * match response == 'true'
	  * call read('LicensesCommonMethods.feature@checkApplicationStatus') {} 
	 
@SubmitReconExaminerQueue
Scenario: SubmitReconExaminerQueue

	   Given path '/internalapi/api/comment/Application/save'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
     And request {"description":'#(Comments)',"acaId":'#(appId)',"acatype":"Application","bureau":"License","bureauId":1,"acaStatus":"NextRecon"}
      When method post
	  Then status 200
	  And print response
	 
	 
	 Given path '/internalapi/api/notification/SaveNotification'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"applicant":{"communicationId":19315,"email":'#(emailId)',"appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":19318,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"isInstantEmail":false,"appId":'#(appId)',"notificationTypeId":2115,"createdBy":"Tarun  Gupta"}
	  
	  When method post
	  Then status 200
	  And print response
	  
	  	
	Given path '/internalapi/api/licensing/reconsideration/submit/'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
       And header current-wfroleid = 4
      And header authorization = 'Bearer ' + strToken
        * def expirationDate = expirationDateFunc(7)
	 	* def effectiveDate = effectiveDateFunc()
     And request {"EmailNotificationModel":{"applicant":{"communicationId":19315,"email":"automation@svam.com","appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":19209,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null}},"AppId":'#(appId)',"DeterminationValue":'#(DeterminationValue)',"isDisapproveForCause":false,"isConditionallyApprove":false,"TaskId":3505,"ExpirationDate":'#(expirationDate)',"EffectiveDate":'#(effectiveDate)',"Comments":'#(Comments)',"AppPermitsList":[]}
	  When method post
	  Then status 200
	  And print response
	  * match response == 'true'	
	  * call read('LicensesCommonMethods.feature@checkApplicationStatus') {}		  
	  
	  
	 
@SubmitReconLBDecision
Scenario: SubmitReconLBDecision

	   Given path '/internalapi/api/comment/Application/save'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
     And request {"description":'#(Comments)',"acaId":'#(appId)',"acatype":"Application","bureau":"License","bureauId":1,"acaStatus":"NextRecon"}
                 
      When method post
	  Then status 200
	  And print response
	 
	 
	 Given path '/internalapi/api/notification/SaveNotification'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"applicant":{"communicationId":19315,"email":'#(emailId)',"appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":19318,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"isInstantEmail":false,"appId":'#(appId)',"notificationTypeId":2115,"createdBy":"Tarun  Gupta"}
	  
	  When method post
	  Then status 200
	  And print response
	  
	  	
	Given path '/internalapi/api/licensing/reconsideration/submit/'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
       And header current-wfroleid = 5
      And header authorization = 'Bearer ' + strToken
        * def expirationDate = expirationDateFunc(7)
	 	* def effectiveDate = effectiveDateFunc()
	    * def payload = {"EmailNotificationModel":{"applicant":{"communicationId":19315,"email":"automation@svam.com","appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":19209,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null}},"AppId":'#(appId)',"DeterminationValue":'#(DeterminationValue)',"isDisapproveForCause":'#(DisapprovalForCause)',"isConditionallyApprove":false,"TaskId":'#(TaskId)',"ExpirationDate":'#(expirationDate)',"EffectiveDate":'#(effectiveDate)',"Comments":'#(Comments)',"AppPermitsList":[]}
		* def payloadFTC = {"EmailNotificationModel":{"applicant":{},"attorney":{},"communityBoard":{},"other":{}},"AppId":'#(appId)',"DeterminationValue":'#(DeterminationValue)',"isDisapproveForCause":'#(DisapprovalForCause)',"isConditionallyApprove":false,"TaskId":'#(TaskId)',"ExpirationDate":'#(expirationDate)',"EffectiveDate":'#(effectiveDate)',"Comments":'#(Comments)',"AppPermitsList":[]}
	
	* eval if (reconType == 'FTC') payload = payloadFTC
	  
	  And request payload
	  When method post
	  Then status 200
	  And print response
	  * match response == 'true'	
	  * call read('LicensesCommonMethods.feature@checkApplicationStatus') {}	  
	  

@SubmitDCOLRecon
Scenario: SubmitDCOLRecon

	  
	 Given path '/internalapi/api/notification/SaveNotification'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"applicant":{"communicationId":20904,"email":"automation@svam.com","appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":20907,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"isInstantEmail":false,"appId":'#(appId)',"notificationTypeId":2115,"createdBy":"Tarun  Gupta"}
	  When method post
	  Then status 200
	  And print response
	  
	  	
	Given path '/internalapi/api/licensing/reconsideration/submit/'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
       And header current-wfroleid = 8
      And header authorization = 'Bearer ' + strToken
        * def expirationDate = expirationDateFunc(7)
	 	* def effectiveDate = effectiveDateFunc()
     And request {"EmailNotificationModel":{"applicant":{"communicationId":20904,"email":"automation@svam.com","appId":'#(appId)',"emailContactTypeId":1,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"attorney":{"communicationId":20907,"email":"sbandi@svam.com","appId":'#(appId)',"emailContactTypeId":2,"isChecked":true,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"communityBoard":{"communicationId":0,"email":null,"appId":0,"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null},"other":{"communicationId":0,"email":"","appId":'#(appId)',"emailContactTypeId":0,"isChecked":false,"roleId":null,"decision":null,"screen":null,"emails":null,"solicitorEmails":null,"notificatonTypeId":null,"acaType":null,"isInstantEmail":null,"userName":null,"userId":0,"currentRoleId":0,"tempGuid":null,"applicationStatus":null,"taskId":null,"taskRoleId":0,"taskDecision":null,"isActive":null,"createdBy":null,"createdDate":null,"modifiedBy":null,"wfRoleId":0,"modifiedDate":null}},"appId":'#(appId)',"DeterminationValue":'#(DeterminationValue)',"isDisapproveForCause":'#(DisapproveForCause)',"isConditionallyApprove":false,"TaskId":'#(TaskId)',"ExpirationDate":'#(expirationDate)',"EffectiveDate":'#(effectiveDate)',"Comments":'#(Comments)',"AppPermitsList":[]}
	  When method post
	  Then status 200
	  And print response
	  * match response == 'true'	
	  * call read('LicensesCommonMethods.feature@checkApplicationStatus') {}		  
	  
	  
	 

@AssociatedLicPermitDisApproval
Scenario Outline:  AssociatedLicPermitDisApproval
   
	# ********* Login Functionality *********************
  	## Start: AssociatedLicPermitDisApproval ****##
	
	  	* def IndOrgSelectionDropDown = <IndOrgSelection>
  		* def indOrgCode = getIndORgCodeFunc(IndOrgSelectionDropDown)
  			And print indOrgCode
  		* def isIndStatus = getStatusIndOrgStatus(IndOrgSelectionDropDown)
	    * def CorporateStructureDropDown = <CorporateStructure>
	    * def CorporateStructureDropDownCode = getIndORgCodeFunc(indOrgCode,CorporateStructureDropDown)
	   		And print CorporateStructureDropDownCode
	    * def firstName = <FirstName>
	    * def lastName = <LastName>
	    * def legalName = firstName+ ' '+lastName
	    * def Address1 = <Address1>
	    * def Address2 = <Address2>
	    * def CityName = <City>
	    * def zipCode = <ZipCode>
	    * def postalCode = <PostalCode>
	    * def countryName = <Country>
	    * def emailId = <Email>
	    * def convictedOfCrime = <convictedOfCrime>
	    * def percentageOfOwners = <percentageOfOwners>
	    * def isFingerprintRequired = <isFingerprintRequired>
	    * def isFingerprintsApproved = <isFingerprintsApproved>
	    * def isSignature = <isSignature>
	    
	    * def convictedOfCrime = <convictedOfCrime>
		* def PhoneNumber = <PhoneNumber>
		* def PhoneExtn = <PhoneExtn>
		* def countryCode = <countryCode>
		* def stateCode = <StateCode>
	    
	  	* def mainLicensePermitTypeId = <LicensePermitTypeId>
	    * def termInYears = <NumberOfTerm>
	    * def termDesc = <NumberOfTerm>+' Year (s)'
	    * def licenseFees = <InitialLicFee>
	    * def fillingFees = <NonRefundableFilingFees>
	    * def licAncillaryFees = <AncillaryFees>
	    * def renewalFees = <RenewalFilingFees>+''
	    * string productName = <ProductTypes>+''
	     
	    * def CountyID = <countyIds>
	    * def CountyName = <County>	
		* def totalFees = licenseFees+fillingFees+licAncillaryFees+1100
	      * def splittedCityName = CityName.replaceAll(" ","")
	    * call read('LicensesCommonMethods.feature@IntakeLicensewithAssociatedPermit') {}
	    * def childAppId = response[0].childAppId
	  * def childApplicationId = response[0].childApplicationId
	   * def childFormId = response[0].formId
	  * def childDescription = response[1].description
	   And print childAppId
	   And print childApplicationId
	    And print childDescription
	  * def parentApplicationId = response[1].mainApplicationId
	  And print parentApplicationId
	  
	  * def parentDescription = response[1].description
	 * def parentAppId = response[1].appId
	  * def parentFormId = response[1].formId
	  And print parentAppId
	   And print parentDescription
	   
        * call read('LicensesCommonMethods.feature@FillAndSaveApplicantInformationPage') {}
	    * call read('LicensesCommonMethods.feature@FillAndSavePrincipalPage') {}
	    * call read('LicensesCommonMethods.feature@FillAndSaveRepresentativePage') {}
	    * call read('LicensesCommonMethods.feature@FeesValidation') {amount:'#(totalFees)'}
	  	* call read('LicensesCommonMethods.feature@SubmitLicenseAndValidateLicStatus') {expStatus:'Awaiting Review'}
	
		* call read('LicensesCommonMethods.feature@AssignApplicationsToExaminer') {expStatus:'Awaiting Review'}
	     
	     * call read('LicensesCommonMethods.feature@ExaminerReviewApprovalToLB') {isFingerPrintsApproved:true,isFingerPrintsRequired:false,expStatus:'Awaiting Review'}
	     * call read('LicensesCommonMethods.feature@AddLicenseClaimingQueue') {}
	     * def appId = childAppId
	     * def ApplicationId = childApplicationId
	     And print childApplicationId
	     * def description = childDescription
	     * def formId = childFormId
	    
	    * call read('LicensesCommonMethods.feature@FillAndSavePrincipalPage') {}
	   
	    * call read('LicensesCommonMethods.feature@FeesValidation') {amount:'#(totalFees)'}
	  	* call read('LicensesCommonMethods.feature@SubmitLicenseAndValidateLicStatus') {expStatus:'Awaiting Review'}
	
	* call read('LicensesCommonMethods.feature@AssignApplicationsToExaminer') {expStatus:'Awaiting Review'}
	     
	     
	    * call read('PermitsCommonMethods.feature@PermitExaminerReview') {isFingerPrintsApproved:true,isFingerPrintsRequired:false,expStatus:'Awaiting Review'}
	    * call read('LicensesCommonMethods.feature@ValidateLicenseApplicationStatus') {LicAppStatus:'Under Review'}
	    * call read('LicensesCommonMethods.feature@AddLicenseClaimingQueue') {}
		
		
		 * def appId = parentAppId
	     * def ApplicationId = parentApplicationId
	     And print parentApplicationId
	     * def description = parentDescription
	     * def formId = parentFormId
	     * call read('ReconCommonMethods.feature@UploadReconDisapprovalDoc') {}
		 * def lbStatus = 'Disapproved'
		 * def lbDropDownVal = 2
	    #* call read('PermitsCommonMethods.feature@PermitLBDisapproval') {expStatus:'Disapproved'}
		* call read('LicensesCommonMethods.feature@DisapproveLB') {}
		
		* call read('LicensesCommonMethods.feature@ValidateLicenseApplicationStatus') {LicAppStatus:'Disapproved'}
		
		
	  	
	## End : AssociatedLicPermitDisApproval ****##
	 	
Examples:
     | read('/CSVFiles/RenewalAssociatedPermit.csv') | 	  

@SubmitDCOLRecontoCounsel
Scenario: SubmitDCOLRecontoCounsel

	  Given path 'internalapi/api/licensing/LBDecision/getLicenseByAppId/'+appId+'/-1'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request ""
	  When method get
	  Then status 200
	  And print response
	  * def effectiveDate = response.license.effectiveDate
	  * def expiryDate = response.license.expiryDate
	  
	  Given path 'internalapi/api/documents/GetDocuments'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"type":"application","id":'#(appId)',"subCategory":"REQUEST,RECONSIDERATION,Disapproval"}
	  When method post
	  Then status 200
	  And print response	
	   
	  Given path 'internalapi/api/comment/Application/save'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"description":"test refer to counsel","acaId":'#(appId)',"acatype":"Application","bureau":"License","bureauId":1,"acaStatus":"NextRecon"}
	  When method post
	  Then status 200
	  And print response
	  
	  Given path 'internalapi/api/comment/Application/save'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"description":"test refer to counsel","acaId":'#(appId)',"acatype":"Application","bureau":"License","bureauId":1,"acaStatus":"NextRecon"}
	  When method post
	  Then status 200
	  And print response
	  
	  	
	Given path 'internalapi/api/licensing/reconsideration/submit/'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
       And header current-wfroleid = 8
      And header authorization = 'Bearer ' + strToken

      And request {"EmailNotificationModel":{"applicant":{},"attorney":{},"communityBoard":{},"other":{}},"AppId":'#(appId)',"DeterminationValue":2,"isDisapproveForCause":true,"isConditionallyApprove":false,"TaskId":3525,"ExpirationDate":'#(expiryDate)',"EffectiveDate":'#(effectiveDate)',"Comments":"test refer","AppPermitsList":[]}
	  When method post
	  Then status 200
	  And print response
	  * match response == 'true'	
	  * call read('LicensesCommonMethods.feature@checkApplicationStatus') {}	
	 
	  Given path 'internalapi/api/role/8'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request ""
	  When method get
	  Then status 200
	  And print response 
	  
	  Given path 'internalapi/api/account/switchrole/8'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request ""
	  When method get
	  Then status 200
	  And print response 
	   	
	  Given path 'internalapi/api/role/8'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request ""
	  When method get
	  Then status 200
	  And print response   	

@UploadRequestforReconDoc
Scenario: UploadRequestforReconDoc

	     * def receivedDateFunc =
		  """
		  function() {
		    var SimpleDateFormat = Java.type('java.text.SimpleDateFormat');
		    var sdf = new SimpleDateFormat("yyyy/MM/dd");
		    var date = new java.util.Date();
		    return sdf.format(date);
		  } 
		  """ 
  	  * def receivedDate = receivedDateFunc()
  	  
  	  Given path 'internalapi/api/documents/GetDocuments'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"type":"application","id":'#(appId)',"subCategory":""}
	  When method post
	  Then status 200
	  And print response
	  
	  * def totalEnfCount = response.length 
	  * def beforeReferEnfcount = totalEnfCount
  	  
	  Given path '/internalapi/api/document/UploadDocument'
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"documentDesc":"Request for Recon Doc","acaId":'#(appId)',"acaType":"application","bureau":"bureau","documentType":{"key":181,"value":"REQUEST FOR RECON","description":null,"documentSubCategory":"RECONSIDERATION"},"documentCategory":null,"receivedDate":'#(receivedDate)',"createdDate":'#(date)',"documentBase64":"data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,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","contentType":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","fileName":"TestDocument.docx","tempGuid":"a6fd31bc-fa24-f48f-a4ee-27338b50493c"}
              #   {"documentDesc":"Request for Recon Doc","acaId":57126     ,"acaType":"application","bureau":"bureau","documentType":{"key":181,"value":"REQUEST FOR RECON","description":null,"documentSubCategory":"RECONSIDERATION"},"documentCategory":null,"receivedDate":"2023/01/23"     ,"createdDate":"2023-01-,"documentBase64":"data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,","contentType":"application/vnd.openxmlformats-officedocument.wordprocessingml.document","fileName":"Deficiency Letter.docx","tempGuid":"350a8f72-cbab-0fc0-f2cd-9637b150f869"}
      When method post
	  Then status 200
	  And print response
	  * match response == 'true'	
	  
	  Given path 'internalapi/api/documents/GetDocuments'
      
  	  And header Content-Type = 'application/json; charset=utf-8'
      And header Accept = 'application/json; text/plain;*/*'
      And header authorization = 'Bearer ' + strToken
      And request {"type":"application","id":'#(appId)',"subCategory":""}
	  When method post
	  Then status 200
	  And print response
	  
	  * def totalEnfCount = response.length 
	  * def afterReferEnfcount = totalEnfCount
	     And print beforeReferEnfcount
	     And print afterReferEnfcount
	     * assert afterReferEnfcount > beforeReferEnfcount
	    